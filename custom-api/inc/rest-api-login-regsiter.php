<?php
/*====================================== Login- Register API - Start ================================================ */

/**
 * WordPress nonces are one-time use security tokens generated by WordPress to help protect URLs and forms getting misused by malicious hack attempts.
 *
 * Function Name: nonce
 *
 */
function nonce($request)
{
    $nonce = wp_create_nonce('json_api-user-register');
    if ($nonce) {
        return array(
            'status' => '1',
            'value' => $nonce
        );
    } else {
        return [
            'success' => false,
            'message' => 'please try again'
        ];
    }
}

/*====================================== Register API - Start ================================================ */
/**
 * Rest api for Register New user
 *
 * Function Name: register
 *
 */

function register(WP_REST_Request $request)
{
    if (validate_authorization_header()) {
        global $json_api;

        if (!get_option('users_can_register')) {
            return [
                'success' => false,
                'message' =>
                    'User registration is disabled. Please enable it in Settings > Gereral.'
            ];
        }

        if (!$request["username"]) {
            return [
                'success' => false,
                'message' => 'You must include username var in your request. '
            ];
        } else {
            $username = sanitize_user($request["username"]);
        }

        if (!$request["email"]) {
            return [
                'success' => false,
                'message' => 'You must include email var in your request. '
            ];
        } else {
            $email = sanitize_email($request["email"]);
        }

        if (!$request["billing_phone"]) {
            return [
                'success' => false,
                'message' =>
                    'You must include billing_phone var in your request. '
            ];
        }
        if (!is_numeric($request["billing_phone"])) {
            return [
                'success' => false,
                'message' => 'Invalid Mobile number"'
            ];
        }

        if ($request["billing_phone"]) {
            $hasPhoneNumber = get_users(
                'meta_value=' . $request["billing_phone"]
            );
            if (!empty($hasPhoneNumber)) {
                return [
                    'success' => false,
                    'message' => 'Mobile number is already used!'
                ];
            }
        }
        /**
         *
         * remove  commenting below condition if you want to use nonce.
         *
         */
        /*
if (!$request["nonce"]) {
return [
'success' => false,
'message' => 'You must include nonce var in your request. Use the get_nonce Core API method.',
];


} else {
$nonce = sanitize_text_field($request["nonce"]) ;} */

        if (!$request["display_name"]) {
            return [
                'success' => false,
                'message' =>
                    'You must include display_name var in your request.'
            ];
        } else {
            $display_name = sanitize_text_field($request["display_name"]);
        }

        $user_pass = sanitize_text_field($request['user_pass']);

        if ($request['seconds']) {
            $seconds = (int) $request['seconds'];
        } else {
            $seconds = 1209600;
        }

        /*//Add usernames we don't want used*/
        $invalid_usernames = array('admin');

        /*//Do username validation*/

        /*echo $nonce= wp_create_nonce('json_api-user-register');die;*/

        if (
            !validate_username($username) ||
            in_array($username, $invalid_usernames)
        ) {
            return [
                'success' => false,
                'message' => 'Username is invalid.. '
            ];
        } elseif (username_exists($username)) {
            return [
                'success' => false,
                'message' => 'Username already exists'
            ];
        } else {
            if (!is_email($email)) {
                return [
                    'success' => false,
                    'message' => 'E-mail address is invalid.'
                ];
            } elseif (email_exists($email)) {
                return [
                    'success' => false,
                    'message' => 'E-mail address is already in use..'
                ];
            } else {
                //Everything has been validated, proceed with creating the user
                //Create the user

                if (!isset($_REQUEST['user_pass'])) {
                    $user_pass = wp_generate_password();
                    $_REQUEST['user_pass'] = $user_pass;
                }

                $_REQUEST['user_login'] = $username;
                $_REQUEST['user_email'] = $email;

                $allowed_params = array(
                    'user_login',
                    'user_email',
                    'user_pass',
                    'display_name',
                    'user_nicename',
                    'user_url',
                    'nickname',
                    'first_name',
                    'last_name',
                    'description',
                    'rich_editing',
                    'user_registered',
                    'role',
                    'jabber',
                    'aim',
                    'yim',
                    'comment_shortcuts',
                    'admin_color',
                    'use_ssl',
                    'show_admin_bar_front',
                    'billing_phone'
                );

                foreach ($_REQUEST as $field => $value) {
                    if (in_array($field, $allowed_params)) {
                        $user[$field] = trim(sanitize_text_field($value));
                    }
                }
                $user['role'] = get_option('default_role');
                $user_id = wp_insert_user($user);

                /*Send e-mail to admin and new user -  You could create your own e-mail instead of using this function*/
                if (
                    isset($_REQUEST['user_pass']) &&
                    $_REQUEST['notify'] == 'no'
                ) {
                    $notify = '';
                } elseif ($_REQUEST['notify'] != 'no') {
                    $notify = $_REQUEST['notify'];
                }

                if ($user_id) {
                    update_user_meta(
                        $user_id,
                        'billing_phone',
                        sanitize_text_field($request["billing_phone"])
                    );
                    wp_new_user_notification($user_id, '', $notify);
                }
            }
        }

        $expiration =
            time() +
            apply_filters('auth_cookie_expiration', $seconds, $user_id, true);

        $cookie = wp_generate_auth_cookie($user_id, $expiration, 'logged_in');

        return array(
            "success" => 1,
            "message" => "successfully registered",
            "cookie" => $cookie,
            "user_id" => $user_id
        );
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== Register API - End ================================================ */

/*====================================== Login API - Start ================================================ */
/**
 * Rest api for Login
 *
 * Function Name: login - C:\xampp\htdocs\medpick\wp-content\plugins\custom-api\inc\rest-api-login-regsiter.php
 *
 */

function login($request)
{
    if (validate_authorization_header()) {
        global $wpdb;

        $login_detail = array();
        $login_detail['user_login'] = $request["username"];
        $login_detail['user_password'] = $request["password"];
        $login_detail['remember'] = true;

        $user = wp_signon($login_detail, false);

        if (is_wp_error($user)) {
            $user->get_error_message();

            $users = array(
                "success" => 0,
                "message" => "Incorrect username or password.",
                "user_data" => ''
            );
        } else {
            $token = bin2hex(random_bytes(16));
            $updateQuery = $wpdb->update(
                'wp_users',
                array('access_token' => $token),
                array('ID' => $user->data->ID)
            );

            $users = array(
                "success" => 1,
                "message" => "successfully login.",
                "user_id" => $user->data->ID,
                "user_data" => $user
            );

            $user->data->access_token = $token;
        }

        return $users;
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== Login API - End ================================================ */

/*====================================== Forgot Password API - Start ================================================ */
/**
 * Rest api for forgot_password
 *
 * Function Name: forgot_password
 *
 */

function forgot_password($request)
{
    if (validate_authorization_header()) {
        global $wpdb, $wp_hasher;

        $user_login = $request["username"];
        if (empty($user_login)) {
            $response["success"] = 0;
            $response["message"] = "username is Required";
            echo json_encode($response);
            exit();
        }
        if (strpos($user_login, '@')) {
            $user_data = get_user_by('email', trim($user_login));
            if (empty($user_data)) {
                $response["success"] = 0;
                $response["message"] = "Email does not exist in the system";
                echo json_encode($response);
                exit();
            }
        } else {
            $login = trim($user_login);
            $user_data = get_user_by('login', $login);
        }

        $user_login = $user_data->user_login;
        $user_email = $user_data->user_email;

        do_action('retrieve_password', $user_login);

        $allow = apply_filters('allow_password_reset', true, $user_data->ID);

        if (!$allow) {
            $json_api->error("password reset not allowed! ");
        } elseif (is_wp_error($allow)) {
            $json_api->error("An error occured! ");
        }

        $key = wp_generate_password(20, false);

        do_action('retrieve_password_key', $user_login, $key);

        if (empty($wp_hasher)) {
            require_once ABSPATH . 'wp-includes/class-phpass.php';
            $wp_hasher = new PasswordHash(8, true);
        }

        $hashed = time() . ':' . $wp_hasher->HashPassword($key);

        $wpdb->update(
            $wpdb->users,
            array('user_activation_key' => $hashed),
            array('user_login' => $user_login)
        );

        $customMessage = '<p>';
        $customMessage .= __(
            'Someone requested that the password be reset for the following account:',
            'woocommerce'
        );
        $customMessage .= '</p>';
        $customMessage .= '<p>';
        $customMessage .= sprintf(
            __('Username: %s', 'woocommerce'),
            $user_login
        );
        $customMessage .= '</p>';
        $customMessage .= '<p>';
        $customMessage .= __(
            'If this was a mistake, just ignore this email and nothing will happen.',
            'woocommerce'
        );
        $customMessage .= '</p>';
        $customMessage .= '<p>';
        $customMessage .= __(
            'To reset your password, visit the following address:',
            'woocommerce'
        );
        $customMessage .= '</p>';
        $customMessage .= '<p>';
        $customMessage .=
            '<a style="
	    color: white;
	    font-weight: bold;
	    text-decoration: none;
	    outline: none;
	    display: block;
	    background: #4e9caf;
	    padding: 10px;
	    text-align: center;
	    border-radius: 5px;" href="' .
            network_site_url(
                "wp-login.php?action=rp&key=$key&login=" .
                    rawurlencode($user_login),
                'login'
            ) .
            '">';
        $customMessage .= __(
            'Click here to reset your password',
            'woocommerce'
        );
        $customMessage .= '</a>';
        $customMessage .= '</p>';

        $message = $customMessage;

        if (is_multisite()) {
            $blogname = $GLOBALS['current_site']->site_name;
        } else {
            $blogname = wp_specialchars_decode(
                get_option('blogname'),
                ENT_QUOTES
            );
        }

        $title = sprintf(__('Password reset for ' . $blogname . ''), $blogname);

        $title = apply_filters('retrieve_password_title', $title);

        $message = apply_filters('retrieve_password_message', $message, $key);

        $headers = array('Content-Type: text/html; charset=UTF-8');

        if ($message && !wp_mail($user_email, $title, $message, $headers)) {
            $response["success"] = 0;
            $response["message"] =
                "The e-mail could not be sent. Possible reason: your host may have disabled the mail() function...";
            echo json_encode($response);
            exit();
        } else {
            $response["success"] = 1;
            $response["message"] =
                "Link for password reset has been emailed to you. Please check your email.";
            echo json_encode($response);
        }
        exit();
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== Forgot Password API  - End ================================================ */

/*====================================== Change Password API - Start ================================================ */
/**
 * Rest api for Change Password
 *
 * Function Name: change_password
 *
 */

function change_password($request)
{
    if (validate_authorization_header()) {
        $get_current_user_id = $request["user_id"];
        $password = $request['new_password'];

        $user = get_user_by( 'id', $get_current_user_id )->user_pass;

        if (empty($get_current_user_id)) {
            $response["success"] = 0;
            $response["message"] = "user_id is Required";
            echo json_encode($response);
            exit();
        }
        if (empty($password)) {
            $response["success"] = 0;
            $response["message"] = "new_password is Required";
            echo json_encode($response);
            exit();
        }

        function user_id_exists($get_current_user_id)
        {
            global $wpdb;
            $count = $wpdb->get_var(
                $wpdb->prepare(
                    "SELECT COUNT(*) FROM $wpdb->users WHERE ID = %d ",
                    $get_current_user_id
                )
            );
            if ($count == 1) {
                return true;
            } else {
                return false;
            }
        }
        if (user_id_exists($get_current_user_id)) {
        } else {
            $response["success"] = 0;
            $response["message"] = "Invalid get_current_user_id.";
            $response["data"] = (object) [];
        }

        wp_set_password($password, $get_current_user_id);
        $response["success"] = 1;
        $response["Name"] = $user;
        $response["message"] = "Password reset successfully!";
        $response["data"] = (object) [];

        $json_terms = json_encode($response);
        echo $json_terms;
        exit();
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== Change Password API  - End ================================================ */

/*====================================== Profile view API - Start ================================================ */
/**
 * Rest api for edit profile view
 *
 * Function Name: edit_profile_view
 *
 */

function edit_profile_view($request)
{
    if (validate_authorization_header()) {
        $get_current_user_id = $request["user_id"];

        $user_id = $request['user_id'];

        if (empty($user_id)) {
            $response["success"] = 0;
            $response["message"] = "user_id is Required";
            echo json_encode($response);
            exit();
        }

        $userdata = get_userdata($user_id);
        $usermetadata = get_user_meta($user_id);
        $user = get_user_by('ID', $user_id);

        wp_set_current_user($user->ID, $user->user_login);

        $result['first_name'] = get_user_meta($user_id, 'first_name', true);
        $result['last_name'] = get_user_meta($user_id, 'last_name', true);
        $result['billing_address']['billing_first_name'] = get_user_meta(
            $user_id,
            'billing_first_name',
            true
        );
        $result['billing_address']['billing_last_name'] = get_user_meta(
            $user_id,
            'billing_last_name',
            true
        );
        $result['billing_address']['billing_company'] = get_user_meta(
            $user_id,
            'billing_company',
            true
        );
        $result['billing_address']['billing_address_1'] = get_user_meta(
            $user_id,
            'billing_address_1',
            true
        );
        $result['billing_address']['billing_address_2'] = get_user_meta(
            $user_id,
            'billing_address_2',
            true
        );
        $result['billing_address']['billing_city'] = get_user_meta(
            $user_id,
            'billing_city',
            true
        );
        $result['billing_address']['billing_postcode'] = get_user_meta(
            $user_id,
            'billing_postcode',
            true
        );
        $result['billing_address']['billing_country'] = get_user_meta(
            $user_id,
            'billing_country',
            true
        );
        $result['billing_address']['billing_phone'] = get_user_meta(
            $user_id,
            'billing_phone',
            true
        );
        $result['billing_address']['billing_email'] = get_user_meta(
            $user_id,
            'billing_email',
            true
        );

        $result['shipping_address']['shipping_first_name'] = get_user_meta(
            $user_id,
            'shipping_first_name',
            true
        );
        $result['shipping_address']['shipping_last_name'] = get_user_meta(
            $user_id,
            'shipping_last_name',
            true
        );
        $result['shipping_address']['shipping_company'] = get_user_meta(
            $user_id,
            'shipping_company',
            true
        );
        $result['shipping_address']['shipping_address_1'] = get_user_meta(
            $user_id,
            'shipping_address_1',
            true
        );
        $result['shipping_address']['shipping_address_2'] = get_user_meta(
            $user_id,
            'shipping_address_2',
            true
        );
        $result['shipping_address']['shipping_city'] = get_user_meta(
            $user_id,
            'shipping_city',
            true
        );
        $result['shipping_address']['shipping_postcode'] = get_user_meta(
            $user_id,
            'shipping_postcode',
            true
        );
        $result['shipping_address']['shipping_country'] = get_user_meta(
            $user_id,
            'shipping_country',
            true
        );

        foreach ($userdata->data as $key => $value) {
            if ($key != 'user_pass') {
                $result[$key] = $value;
            }
        }

        $remove_key = array(
            'simple_local_avatar',
            '_woocommerce_persistent_cart_1'
        );

        foreach ($usermetadata as $key => $value) {
            if (!in_array($key, $remove_key)) {
                $result[$key] = $value[0];
            }
        }
        unset($result['session_tokens']);
        $data = $result;
        $response["success"] = 1;
        $response["message"] = "";
        $response["data"] = $data;

        $json_terms = json_encode($response);
        echo $json_terms;
        exit();
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== View profile API  - End ================================================ */

/*====================================== Updated Profile API - Start ================================================ */
/**
 * Rest api for Updated Profile
 *
 * Function Name: save_profile
 *
 */

function save_profile($request)
{
    if (validate_authorization_header()) {
        $user_id = $request['user_id'];
        $current_user = get_user_by('id', $user_id);
        $user_email_live = $current_user->user_email;

        if (empty($user_id)) {
            $response["success"] = 0;
            $response["message"] = "user_id is Required";
            echo json_encode($response);
            exit();
        }
        if (empty($request['first_name'])) {
            $response["success"] = 0;
            $response["message"] = "first_name is Required";
            echo json_encode($response);
            exit();
        }
        if (empty($request['last_name'])) {
            $response["success"] = 0;
            $response["message"] = "last_name is Required";
            echo json_encode($response);
            exit();
        }
        if (empty($request['mobile'])) {
            $response["success"] = 0;
            $response["message"] = "mobile is Required";
            echo json_encode($response);
            exit();
        }

        if (isset($request['first_name'])) {
            $data['first_name'] = $request['first_name'];
        }
        if (isset($request['last_name'])) {
            $data['last_name'] = $request['last_name'];
        }
        if (isset($request['nickname'])) {
            $data['user_nicename'] = $request['nickname'];
        }
        if (isset($request['email'])) {
            $user_email = $request['email'];
        }

        if (isset($request['password'])) {
            $user_pass = $request['password'];
        }
        if (isset($request['old_password'])) {
            $old_password = $request['old_password'];
        }
        if (isset($request['pincode'])) {
            $data['pincode'] = $request['pincode'];
        }
        if (isset($request['mobile'])) {
            $data['mobile'] = $request['mobile'];
        }
        if (isset($request['billing_first_name'])) {
            $data['billing_first_name'] = $request['billing_first_name'];
        }
        if (isset($request['billing_last_name'])) {
            $data['billing_last_name'] = $request['billing_last_name'];
        }
        if (isset($request['billing_company'])) {
            $data['billing_company'] = $request['billing_company'];
        }
        if (isset($request['billing_address_1'])) {
            $data['billing_address_1'] = $request['billing_address_1'];
        }
        if (isset($request['billing_address_2'])) {
            $data['billing_address_2'] = $request['billing_address_2'];
        }
        if (isset($request['billing_city'])) {
            $data['billing_city'] = $request['billing_city'];
        }
        if (isset($request['billing_postcode'])) {
            $data['billing_postcode'] = $request['billing_postcode'];
        }
        if (isset($request['billing_country'])) {
            $data['billing_country'] = $request['billing_country'];
        }
        if (isset($request['billing_state'])) {
            $data['billing_state'] = $request['billing_state'];
        }
        if (isset($request['billing_phone'])) {
            $data['billing_phone'] = $request['billing_phone'];
        }
        if (isset($request['billing_email'])) {
            $data['billing_email'] = $request['billing_email'];
        }

        if (isset($request['shipping_first_name'])) {
            $data['shipping_first_name'] = $request['shipping_first_name'];
        }
        if (isset($request['shipping_last_name'])) {
            $data['shipping_last_name'] = $request['shipping_last_name'];
        }
        if (isset($request['shipping_company'])) {
            $data['shipping_company'] = $request['shipping_company'];
        }
        if (isset($request['shipping_address_1'])) {
            $data['shipping_address_1'] = $request['shipping_address_1'];
        }
        if (isset($request['shipping_address_2'])) {
            $data['shipping_address_2'] = $request['shipping_address_2'];
        }
        if (isset($request['shipping_city'])) {
            $data['shipping_city'] = $request['shipping_city'];
        }
        if (isset($request['shipping_postcode'])) {
            $data['shipping_postcode'] = $request['shipping_postcode'];
        }
        if (isset($request['shipping_country'])) {
            $data['shipping_country'] = $request['shipping_country'];
        }
        if (isset($request['shipping_state'])) {
            $data['shipping_state'] = $request['shipping_state'];
        }

        if (!empty($user_email)) {
            if ($user_pass) {
                if (
                    $current_user &&
                    wp_check_password(
                        $old_password,
                        $current_user->data->user_pass,
                        $current_user->ID
                    )
                ) {
                    wp_set_password($user_pass, $user_id);
                } else {
                    $response["success"] = 0;
                    $response["message"] = "old password does not matched!";
                    echo json_encode($response);
                    exit();
                }
            }
        }

        foreach ($data as $key => $value) {
            update_user_meta($user_id, $key, $value);
        }

        $data['user_login'] = $current_user->user_login;
        $response["success"] = 1;
        $response["message"] = "Profile Updated";
        $response["data"] = $data;

        $json_terms = json_encode($response);
        echo $json_terms;
        exit();
    } else {
        return [
            'success' => false,
            'message' => 'Authorization failed.'
        ];
    }
}

/*====================================== Updated Profile API - End ================================================ */

add_action('rest_api_init', function () {
    register_rest_route('medpick-api', 'login', array(
        'methods' => 'POST',
        'callback' => 'login'
    ));

    register_rest_route('medpick-api', '/nonce/', array(
        'methods' => 'GET',
        'callback' => 'nonce'
    ));

    register_rest_route('medpick-api', 'register', array(
        'methods' => 'POST',
        'callback' => 'register'
    ));

    register_rest_route('medpick-api', '/change_password/', array(
        'methods' => 'POST',
        'callback' => 'change_password'
    ));

    register_rest_route('medpick-api', '/save_profile/', array(
        'methods' => 'POST',
        'callback' => 'save_profile'
    ));

    register_rest_route('medpick-api', '/edit_profile/', array(
        'methods' => 'POST',
        'callback' => 'edit_profile_view'
    ));

    register_rest_route('medpick-api', '/forgot_password/', array(
        'methods' => 'POST',
        'callback' => 'forgot_password'
    ));
});

/*====================================== Login - Register API  - End ================================================ */
